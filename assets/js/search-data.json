{
  
    
        "post0": {
            "title": "MNE tutorial part 1",
            "content": "from IPython.display import YouTubeVideo YouTubeVideo(&#39;qb9ngu62Fbw&#39;, width=800, height=400) . %matplotlib inline import mne import matplotlib.pyplot as plt . fname = &quot;oddball_example_small-fif.gz&quot; . Read in raw data; raw objects . raw = mne.io.read_raw_fif(fname) . Opening raw data file oddball_example_small-fif.gz... . &lt;ipython-input-3-78767f98f250&gt;:1: RuntimeWarning: This filename (oddball_example_small-fif.gz) does not conform to MNE naming conventions. All raw files should end with raw.fif, raw_sss.fif, raw_tsss.fif, raw.fif.gz, raw_sss.fif.gz, raw_tsss.fif.gz or _meg.fif raw = mne.io.read_raw_fif(fname) . Isotrak not found Range : 2903 ... 112000 = 29.030 ... 1120.000 secs Ready. . Visualize sample data . raw.plot(duration=60.0, start=0.0, n_channels=16,); . The information about the object can be found at raw.info . print(raw.info) . &lt;Info | 10 non-empty values bads: [] ch_names: FP1, FP2, F7, F3, Fz, F4, F8, FC5, FC1, FC2, FC6, T7, C3, Cz, ... chs: 63 EEG, 1 STIM custom_ref_applied: True file_id: 4 items (dict) highpass: 0.1 Hz lowpass: 30.0 Hz meas_date: 2017-08-10 20:05:16 UTC meas_id: 4 items (dict) nchan: 64 projs: [] sfreq: 100.0 Hz &gt; . MNE is object oriented. Objects have corresponding methods. Check which by typing raw. and pressing TAB: . raw.filter . &lt;bound method BaseRaw.filter of &lt;Raw | oddball_example_small-fif.gz, 64 x 109098 (1091.0 s), ~120 kB, data not loaded&gt;&gt; . raw.resample raw.filter raw.drop_channels ... . Can we do further preprocessing?.. . raw.filter(1, 20) . RuntimeError Traceback (most recent call last) &lt;ipython-input-14-780629dd327e&gt; in &lt;module&gt; -&gt; 1 raw.filter(1, 20) ~ anaconda3 envs mne lib site-packages mne io base.py in filter(self, l_freq, h_freq, picks, filter_length, l_trans_bandwidth, h_trans_bandwidth, n_jobs, method, iir_params, phase, fir_window, fir_design, skip_by_annotation, pad, verbose) 926 skip_by_annotation=(&#39;edge&#39;, &#39;bad_acq_skip&#39;), 927 pad=&#39;reflect_limited&#39;, verbose=None): # noqa: D102 --&gt; 928 return super().filter( 929 l_freq, h_freq, picks, filter_length, l_trans_bandwidth, 930 h_trans_bandwidth, n_jobs, method, iir_params, phase, &lt;decorator-gen-111&gt; in filter(self, l_freq, h_freq, picks, filter_length, l_trans_bandwidth, h_trans_bandwidth, n_jobs, method, iir_params, phase, fir_window, fir_design, skip_by_annotation, pad, verbose) ~ anaconda3 envs mne lib site-packages mne filter.py in filter(self, l_freq, h_freq, picks, filter_length, l_trans_bandwidth, h_trans_bandwidth, n_jobs, method, iir_params, phase, fir_window, fir_design, skip_by_annotation, pad, verbose) 1920 &#34;&#34;&#34; 1921 from .io.base import BaseRaw -&gt; 1922 _check_preload(self, &#39;inst.filter&#39;) 1923 if pad is None and method != &#39;iir&#39;: 1924 pad = &#39;edge&#39; ~ anaconda3 envs mne lib site-packages mne utils check.py in _check_preload(inst, msg) 187 name = &#34;epochs&#34; if isinstance(inst, BaseEpochs) else &#39;raw&#39; 188 if not inst.preload: --&gt; 189 raise RuntimeError( 190 &#34;By default, MNE does not load data into main memory to &#34; 191 &#34;conserve resources. &#34; + msg + &#39; requires %s data to be &#39; RuntimeError: By default, MNE does not load data into main memory to conserve resources. inst.filter requires raw data to be loaded. Use preload=True (or string) in the constructor or raw.load_data(). . By default, MNE does not store raw and epochs objects in memory. . raw = mne.io.read_raw_fif(fname, preload=True) . Opening raw data file oddball_example_small-fif.gz... . &lt;ipython-input-15-7341ee706cdd&gt;:1: RuntimeWarning: This filename (oddball_example_small-fif.gz) does not conform to MNE naming conventions. All raw files should end with raw.fif, raw_sss.fif, raw_tsss.fif, raw.fif.gz, raw_sss.fif.gz, raw_tsss.fif.gz or _meg.fif raw = mne.io.read_raw_fif(fname, preload=True) . Isotrak not found Range : 2903 ... 112000 = 29.030 ... 1120.000 secs Ready. Reading 0 ... 109097 = 0.000 ... 1090.970 secs... . raw.filter(1, 20) . Filtering raw data in 1 contiguous segment Setting up band-pass filter from 1 - 20 Hz FIR filter parameters Designing a one-pass, zero-phase, non-causal bandpass filter: - Windowed time-domain design (firwin) method - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation - Lower passband edge: 1.00 - Lower transition bandwidth: 1.00 Hz (-6 dB cutoff frequency: 0.50 Hz) - Upper passband edge: 20.00 Hz - Upper transition bandwidth: 5.00 Hz (-6 dB cutoff frequency: 22.50 Hz) - Filter length: 331 samples (3.310 sec) . &lt;Raw | oddball_example_small-fif.gz, 64 x 109098 (1091.0 s), ~53.4 MB, data loaded&gt; . Inspecting raw data ... . raw.plot(duration=60.0, start=0.0, n_channels=16,); . There are many eog artefacts. We will use ICA to correct these. For this, we create an ICA object and use its .fit method on a filtered copy of the raw data: . ICA decomposition . ica = mne.preprocessing.ICA(n_components=20, random_state=0) . ica.fit(raw.copy().filter(8, 35)) . Filtering raw data in 1 contiguous segment Setting up band-pass filter from 8 - 35 Hz FIR filter parameters Designing a one-pass, zero-phase, non-causal bandpass filter: - Windowed time-domain design (firwin) method - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation - Lower passband edge: 8.00 - Lower transition bandwidth: 2.00 Hz (-6 dB cutoff frequency: 7.00 Hz) - Upper passband edge: 35.00 Hz - Upper transition bandwidth: 8.75 Hz (-6 dB cutoff frequency: 39.38 Hz) - Filter length: 165 samples (1.650 sec) Fitting ICA to data using 63 channels (please be patient, this may take a while) Inferring max_pca_components from picks Selecting by number: 20 components Fitting ICA took 11.8s. . &lt;ICA | raw data decomposition, fit (fastica): 109098 samples, 20 components, channels used: &#34;eeg&#34;&gt; . ica.plot_components(outlines=&quot;skirt&quot;); . We store &quot;bad&quot; components in the ica object. . ica.exclude = [1, 10, 14, 17, 18, 19] . We could also use one of the automatic algorithms ... . bad_idx, scores = ica.find_bads_eog(raw, &#39;SO2&#39;, threshold=2) print(bad_idx) . Using channel SO2 as EOG channel ... filtering ICA sources Setting up band-pass filter from 1 - 10 Hz FIR filter parameters Designing a two-pass forward and reverse, zero-phase, non-causal bandpass filter: - Windowed frequency-domain design (firwin2) method - Hann window - Lower passband edge: 1.00 - Lower transition bandwidth: 0.50 Hz (-12 dB cutoff frequency: 0.75 Hz) - Upper passband edge: 10.00 Hz - Upper transition bandwidth: 0.50 Hz (-12 dB cutoff frequency: 10.25 Hz) - Filter length: 1024 samples (10.240 sec) ... filtering target Setting up band-pass filter from 1 - 10 Hz FIR filter parameters Designing a two-pass forward and reverse, zero-phase, non-causal bandpass filter: - Windowed frequency-domain design (firwin2) method - Hann window - Lower passband edge: 1.00 - Lower transition bandwidth: 0.50 Hz (-12 dB cutoff frequency: 0.75 Hz) - Upper passband edge: 10.00 Hz - Upper transition bandwidth: 0.50 Hz (-12 dB cutoff frequency: 10.25 Hz) - Filter length: 1024 samples (10.240 sec) [14, 10] . Let&#39;s compare raw and corrected data ... . Before ICA plot . raw.plot(duration=60.0, start=0.0, n_channels=16,); . After ICA plot . ica.apply(raw.copy(), exclude=ica.exclude).plot(duration=60.0, start=0.0, n_channels=16); . Transforming to ICA space (20 components) Zeroing out 6 ICA components . Epochs . For epoching the data, we need event markers. Usually, these are stored in the raw object; in MNE, in a stimulus channel. . mne.find_events? . Signature: mne.find_events( raw, stim_channel=None, output=&#39;onset&#39;, consecutive=&#39;increasing&#39;, min_duration=0, shortest_event=2, mask=None, uint_cast=False, mask_type=&#39;and&#39;, initial_event=False, verbose=None, ) Docstring: Find events from raw file. See :ref:`tut-events-vs-annotations` and :ref:`tut-event-arrays` for more information about events. Parameters - raw : Raw object The raw data. stim_channel : None | str | list of str Name of the stim channel or all the stim channels affected by triggers. If None, the config variables &#39;MNE_STIM_CHANNEL&#39;, &#39;MNE_STIM_CHANNEL_1&#39;, &#39;MNE_STIM_CHANNEL_2&#39;, etc. are read. If these are not found, it will fall back to &#39;STI 014&#39; if present, then fall back to the first channel of type &#39;stim&#39;, if present. If multiple channels are provided then the returned events are the union of all the events extracted from individual stim channels. output : &#39;onset&#39; | &#39;offset&#39; | &#39;step&#39; Whether to report when events start, when events end, or both. consecutive : bool | &#39;increasing&#39; If True, consider instances where the value of the events channel changes without first returning to zero as multiple events. If False, report only instances where the value of the events channel changes from/to zero. If &#39;increasing&#39;, report adjacent events only when the second event code is greater than the first. min_duration : float The minimum duration of a change in the events channel required to consider it as an event (in seconds). shortest_event : int Minimum number of samples an event must last (default is 2). If the duration is less than this an exception will be raised. mask : int | None The value of the digital mask to apply to the stim channel values. If None (default), no masking is performed. uint_cast : bool If True (default False), do a cast to ``uint16`` on the channel data. This can be used to fix a bug with STI101 and STI014 in Neuromag acquisition setups that use channel STI016 (channel 16 turns data into e.g. -32768), similar to ``mne_fix_stim14 --32`` in MNE-C. .. versionadded:: 0.12 mask_type : &#39;and&#39; | &#39;not_and&#39; The type of operation between the mask and the trigger. Choose &#39;and&#39; (default) for MNE-C masking behavior. .. versionadded:: 0.13 initial_event : bool If True (default False), an event is created if the stim channel has a value different from 0 as its first sample. This is useful if an event at t=0s is present. .. versionadded:: 0.16 verbose : bool, str, int, or None If not None, override default verbose level (see :func:`mne.verbose` and :ref:`Logging documentation &lt;tut_logging&gt;` for more). Returns - events : array, shape = (n_events, 3) All events that were found. The first column contains the event time in samples and the third column contains the event id. For output = &#39;onset&#39; or &#39;step&#39;, the second column contains the value of the stim channel immediately before the event/step. For output = &#39;offset&#39;, the second column contains the value of the stim channel after the event offset. See Also -- find_stim_steps : Find all the steps in the stim channel. read_events : Read events from disk. write_events : Write events to disk. Notes -- .. warning:: If you are working with downsampled data, events computed before decimation are no longer valid. Please recompute your events after decimation, but note this reduces the precision of event timing. Examples -- Consider data with a stim channel that looks like:: [0, 32, 32, 33, 32, 0] By default, find_events returns all samples at which the value of the stim channel increases:: &gt;&gt;&gt; print(find_events(raw)) # doctest: +SKIP [[ 1 0 32] [ 3 32 33]] If consecutive is False, find_events only returns the samples at which the stim channel changes from zero to a non-zero value:: &gt;&gt;&gt; print(find_events(raw, consecutive=False)) # doctest: +SKIP [[ 1 0 32]] If consecutive is True, find_events returns samples at which the event changes, regardless of whether it first returns to zero:: &gt;&gt;&gt; print(find_events(raw, consecutive=True)) # doctest: +SKIP [[ 1 0 32] [ 3 32 33] [ 4 33 32]] If output is &#39;offset&#39;, find_events returns the last sample of each event instead of the first one:: &gt;&gt;&gt; print(find_events(raw, consecutive=True, # doctest: +SKIP ... output=&#39;offset&#39;)) [[ 2 33 32] [ 3 32 33] [ 4 0 32]] If output is &#39;step&#39;, find_events returns the samples at which an event starts or ends:: &gt;&gt;&gt; print(find_events(raw, consecutive=True, # doctest: +SKIP ... output=&#39;step&#39;)) [[ 1 0 32] [ 3 32 33] [ 4 33 32] [ 5 32 0]] To ignore spurious events, it is also possible to specify a minimum event duration. Assuming our events channel has a sample rate of 1000 Hz:: &gt;&gt;&gt; print(find_events(raw, consecutive=True, # doctest: +SKIP ... min_duration=0.002)) [[ 1 0 32]] For the digital mask, if mask_type is set to &#39;and&#39; it will take the binary representation of the digital mask, e.g. 5 -&gt; &#39;00000101&#39;, and will allow the values to pass where mask is one, e.g.:: 7 &#39;0000111&#39; &lt;- trigger value 37 &#39;0100101&#39; &lt;- mask - 5 &#39;0000101&#39; For the digital mask, if mask_type is set to &#39;not_and&#39; it will take the binary representation of the digital mask, e.g. 5 -&gt; &#39;00000101&#39;, and will block the values where mask is one, e.g.:: 7 &#39;0000111&#39; &lt;- trigger value 37 &#39;0100101&#39; &lt;- mask - 2 &#39;0000010&#39; File: c: users babib anaconda3 envs mne lib site-packages mne event.py Type: function . events = mne.find_events(raw) . 903 events found Event IDs: [100 200] . events is simply an array (time in samples, zero, trigger); . events . array([[ 3241, 0, 200], [ 3437, 0, 200], [ 3643, 0, 200], ..., [111496, 0, 200], [111613, 0, 200], [111719, 0, 200]], dtype=int64) . ... which we can visualize: . plt.rcParams[&#39;figure.figsize&#39;] = [10, 5] . mne.viz.plot_events(events[:100]); . For creating an mne.Epochs object, we require, in addition to the raw object and the events array, a dictionary of the intended condition names and the corresponding trigger numbers. . event_ids = {&quot;standard/stimulus&quot;: 200, &quot;target/stimulus&quot;: 100} epochs = mne.Epochs(raw, events, event_id=event_ids) . 903 matching events found Applying baseline correction (mode: mean) Not setting metadata 0 projection items activated . epochs.plot(); . Loading data for 903 events and 71 original time points ... 0 bad epochs dropped Loading data for 903 events and 71 original time points ... Loading data for 20 events and 71 original time points ... . (changing to the inline backend now to speed things up.) . epochs = ica.apply(epochs, exclude=ica.exclude) . RuntimeError Traceback (most recent call last) &lt;ipython-input-35-6221a76f7f3f&gt; in &lt;module&gt; -&gt; 1 epochs = ica.apply(epochs, exclude=ica.exclude) ~ anaconda3 envs mne lib site-packages mne preprocessing ica.py in apply(self, inst, include, exclude, n_pca_components, start, stop) 1405 _check_compensation_grade(self.info, inst.info, &#39;ICA&#39;, kind, 1406 ch_names=self.ch_names) -&gt; 1407 return meth(**kwargs) 1408 1409 def _check_exclude(self, exclude): ~ anaconda3 envs mne lib site-packages mne preprocessing ica.py in _apply_epochs(self, epochs, include, exclude, n_pca_components) 1436 def _apply_epochs(self, epochs, include, exclude, n_pca_components): 1437 &#34;&#34;&#34;Aux method.&#34;&#34;&#34; -&gt; 1438 _check_preload(epochs, &#34;ica.apply&#34;) 1439 1440 picks = pick_types(epochs.info, meg=False, ref_meg=False, ~ anaconda3 envs mne lib site-packages mne utils check.py in _check_preload(inst, msg) 187 name = &#34;epochs&#34; if isinstance(inst, BaseEpochs) else &#39;raw&#39; 188 if not inst.preload: --&gt; 189 raise RuntimeError( 190 &#34;By default, MNE does not load data into main memory to &#34; 191 &#34;conserve resources. &#34; + msg + &#39; requires %s data to be &#39; RuntimeError: By default, MNE does not load data into main memory to conserve resources. ica.apply requires epochs data to be loaded. Use preload=True (or string) in the constructor or epochs.load_data(). . Of course ... . epochs = mne.Epochs(raw, events, event_id=event_ids, preload=True) epochs = ica.apply(epochs, exclude=ica.exclude) . 903 matching events found Applying baseline correction (mode: mean) Not setting metadata 0 projection items activated Loading data for 903 events and 71 original time points ... 0 bad epochs dropped Transforming to ICA space (20 components) Zeroing out 6 ICA components . The mne.Epochs constructor has a number of options, such as time window lengths and rejection thresholds. Investigate them on your own. . Epochs objects also have various methods, different from raw objects - e.g., for baselining. . epochs.apply_baseline((None, 0)) . Applying baseline correction (mode: mean) . &lt;Epochs | 903 events (all good), -0.2 - 0.5 sec, baseline [None, 0], ~31.4 MB, data loaded, &#39;standard/stimulus&#39;: 797 &#39;target/stimulus&#39;: 106&gt; . ... and many more ... . epochs. . File &#34;&lt;ipython-input-59-0e32a7ceced3&gt;&#34;, line 1 epochs. ^ SyntaxError: invalid syntax . To subselect only a sample of epochs, a dict-like access mode is available. . epochs . &lt;Epochs | 903 events (all good), -0.2 - 0.5 sec, baseline [None, 0], ~31.4 MB, data loaded, &#39;standard/stimulus&#39;: 797 &#39;target/stimulus&#39;: 106&gt; . epochs[&quot;target&quot;] . &lt;Epochs | 106 events (all good), -0.2 - 0.5 sec, baseline [None, 0], ~3.8 MB, data loaded, &#39;target/stimulus&#39;: 106&gt; . Observe how tags selected by forward slashes - &quot;/&quot; - work. . epochs[&quot;stimulus&quot;] . &lt;Epochs | 903 events (all good), -0.2 - 0.5 sec, baseline [None, 0], ~31.4 MB, data loaded, &#39;standard/stimulus&#39;: 797 &#39;target/stimulus&#39;: 106&gt; . How does the epoched activity look like? . epochs.info . &lt;Info | 10 non-empty values bads: [] ch_names: FP1, FP2, F7, F3, Fz, F4, F8, FC5, FC1, FC2, FC6, T7, C3, Cz, ... chs: 63 EEG, 1 STIM custom_ref_applied: True file_id: 4 items (dict) highpass: 1.0 Hz lowpass: 20.0 Hz meas_date: 2017-08-10 20:05:16 UTC meas_id: 4 items (dict) nchan: 64 projs: [] sfreq: 100.0 Hz &gt; . epochs[&quot;target&quot;].plot_image(picks=[13]); . 106 matching events found No baseline correction applied Not setting metadata 0 projection items activated 0 bad epochs dropped . To ensure we have as many Oddball as Standard trials, we can run ... . epochs.equalize_event_counts(event_ids) epochs . Dropped 691 epochs: 0, 1, 2, 3, 4, 5, 6, 9, 12, 13, 14, 15, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 187, 188, 193, 194, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 249, 252, 253, 254, 257, 260, 261, 262, 263, 266, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 363, 364, 365, 368, 369, 370, 371, 372, 375, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 433, 434, 435, 438, 439, 442, 449, 450, 451, 452, 453, 458, 459, 464, 465, 466, 467, 472, 473, 474, 475, 476, 477, 482, 483, 484, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 551, 552, 553, 554, 555, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 615, 616, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 780, 781, 782, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 799, 802, 805, 806, 809, 810, 811, 812, 813, 814, 817, 818, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 875, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902 . &lt;Epochs | 212 events (all good), -0.2 - 0.5 sec, baseline [None, 0], ~7.5 MB, data loaded, &#39;standard/stimulus&#39;: 106 &#39;target/stimulus&#39;: 106&gt; . We can write the Epochs object to disk so we don&#39;t have to repeat the preprocessing later ... . Save data . epochs.save(&quot;oddball2-epo.fif&quot;) # remember, the data has been cleaned of bad ICs . ls . mne_notebook_1_preproc.ipynb oddball2-epo.fif README.md mne_notebook_2_evoked_data.ipynb oddball-epo.fif mne_notebook_3_mvpa.ipynb oddball_example_small-fif.gz . epochs_for_tfr = mne.Epochs(raw, events, event_id=event_ids, tmin=-.5, tmax=1.5, preload=True) # need longer data segment . 903 matching events found Applying baseline correction (mode: mean) Not setting metadata 0 projection items activated Loading data for 903 events and 201 original time points ... 0 bad epochs dropped . epochs_for_tfr.plot(); . epochs_for_tfr = ica.apply(epochs_for_tfr, exclude=ica.exclude) epochs_for_tfr.equalize_event_counts(event_ids); # to speed up things epochs_for_tfr.save(&quot;oddball-long-epo.fif&quot;) . Transforming to ICA space (20 components) Zeroing out 6 ICA components Dropped 691 epochs: 0, 1, 2, 3, 4, 5, 6, 9, 12, 13, 14, 15, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 187, 188, 193, 194, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 249, 252, 253, 254, 257, 260, 261, 262, 263, 266, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 360, 361, 362, 363, 364, 365, 368, 369, 370, 371, 372, 375, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 433, 434, 435, 438, 439, 442, 449, 450, 451, 452, 453, 458, 459, 464, 465, 466, 467, 472, 473, 474, 475, 476, 477, 482, 483, 484, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 551, 552, 553, 554, 555, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 615, 616, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 780, 781, 782, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 799, 802, 805, 806, 809, 810, 811, 812, 813, 814, 817, 818, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 875, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902 . Get Numpy Array . X = epochs.get_data() . X.shape . (212, 64, 71) . type(X) . numpy.ndarray . epochs[&#39;target&#39;].get_data().shape . (106, 64, 71) . Xtarget = epochs[&#39;target&#39;].get_data() Xnontarget = epochs[&#39;standard&#39;].get_data() . Xtarget.shape . (106, 64, 71) . Xnontarget.shape . (106, 64, 71) .",
            "url": "https://berdakh.github.io/blog/eeg/jupyter/2020/09/10/MNE-Tutorial.html",
            "relUrl": "/eeg/jupyter/2020/09/10/MNE-Tutorial.html",
            "date": " • Sep 10, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "EEG Visualization using MNE",
            "content": "import matplotlib.pyplot as plt import numpy as np . %matplotlib inline %load_ext autoreload %autoreload 2 #%matplotlib qt . plt.rcParams[&#39;font.size&#39;] = 12 #plt.style.use(&#39;ggplot&#39;) plt.rcParams[&quot;axes.grid&quot;] = True c = plt.rcParams[&#39;axes.prop_cycle&#39;].by_key()[&#39;color&#39;] plt.rcParams[&#39;figure.figsize&#39;] = 8, 4 . from nu_smrutils import loaddat . dname = dict(BNCI2014004 = &#39;aBNCI2014004R.pickle&#39;, BNCI2014001 = &#39;aBNCI2014001R.pickle&#39;, Weibo2014 = &#39;aWeibo2014R.pickle&#39;, Physionet = &#39;aPhysionetRR.pickle&#39;) . Load data . Load EEG data for visualization . # itemname is one of : [&#39;BNCI2014004&#39;, &#39;BNCI2014001&#39;, &#39;Weibo2014&#39;, &#39;Physionet&#39;] itemname = &#39;BNCI2014001&#39; . filename = dname[itemname] iname = itemname + &#39;__&#39; data = loaddat(filename) print(&#39;Number of subjects in data :&#39;, len(data)) . Number of subjects in data : 9 . # select data from on subject and use it for demostration subject = 0 s1 = data[subject] print(s1) . &lt;Epochs | 288 events (all good), 2 - 6 sec, baseline off, ~15.6 MB, data loaded, &#39;left_hand&#39;: 144 &#39;right_hand&#39;: 144&gt; . s1[&#39;right_hand&#39;].plot(); . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; s1[&#39;right_hand&#39;].plot_psd(fmin=0, fmax=45); . Using multitaper spectrum estimation with 7 DPSS windows . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Apply common-average reference . # use the average of all channels as reference s1.set_eeg_reference(ref_channels=&#39;average&#39;) s1[&#39;right_hand&#39;].plot(); . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; s1[&#39;right_hand&#39;].plot_psd(fmin=0, fmax=45); . Using multitaper spectrum estimation with 7 DPSS windows . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Data info . print(s1.info) . &lt;Info | 17 non-empty fields bads : list | 0 items ch_names : list | Fz, FC3, FC1, FCz, FC2, FC4, C5, C3, C1, ... chs : list | 22 items (EEG: 22) comps : list | 0 items custom_ref_applied : bool | True dev_head_t : Transform | 3 items dig : list | 25 items (3 Cardinal, 22 EEG) events : list | 0 items highpass : float | 4.0 Hz hpi_meas : list | 0 items hpi_results : list | 0 items lowpass : float | 60.0 Hz meas_date : NoneType | unspecified nchan : int | 22 proc_history : list | 0 items projs : list | 0 items sfreq : float | 80.0 Hz acq_pars : NoneType acq_stim : NoneType ctf_head_t : NoneType description : NoneType dev_ctf_t : NoneType experimenter : NoneType file_id : NoneType gantry_angle : NoneType hpi_subsystem : NoneType kit_system_id : NoneType line_freq : NoneType meas_id : NoneType proj_id : NoneType proj_name : NoneType subject_info : NoneType xplotter_layout : NoneType &gt; . s1.plot_sensors(title = &#39;EEG sensor locations and labels&#39;, show_names = True); . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Band-pass filter . Apply band-pass filter to extract $ mu$ and $ beta$ band EEG features between (8 - 30) Hz . s1.filter(l_freq = 8, h_freq = 30) . &lt;Epochs | 288 events (all good), 2 - 6 sec, baseline off, ~15.6 MB, data loaded, &#39;left_hand&#39;: 144 &#39;right_hand&#39;: 144&gt; . s1[&#39;right_hand&#39;].plot(); . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; s1[&#39;right_hand&#39;].plot_image(picks = [&#39;Cz&#39;], scalings = dict(eeg=1e6)) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; [&lt;Figure size 576x288 with 4 Axes&gt;] . s1[&#39;right_hand&#39;].plot_psd(fmin=0, fmax=45); . Using multitaper spectrum estimation with 7 DPSS windows . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; bands = [(4, 8, &#39;Theta&#39;), (8, 12, &#39;Mu Rhythm&#39;), (12, 30, &#39;Beta&#39;)] . s1[&#39;right_hand&#39;].plot_psd_topomap(bands = bands, normalize = True); . Using multitaper spectrum estimation with 7 DPSS windows . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Get numpy array and visualize . print(&#39;EEG data is 3D numpy array (trials x channels x time samples) :&#39;, s1[&#39;right_hand&#39;].get_data().shape) . EEG data is 3D numpy array (trials x channels x time samples) : (144, 22, 321) . trial = 1 x = s1[&#39;right_hand&#39;].get_data()[trial,:,:] print(&#39;Channel x time samples :&#39;, x.shape) . Channel x time samples : (22, 321) . Plot single channel data from one trial . ch_names = s1.info[&#39;ch_names&#39;] ch_names . [&#39;Fz&#39;, &#39;FC3&#39;, &#39;FC1&#39;, &#39;FCz&#39;, &#39;FC2&#39;, &#39;FC4&#39;, &#39;C5&#39;, &#39;C3&#39;, &#39;C1&#39;, &#39;Cz&#39;, &#39;C2&#39;, &#39;C4&#39;, &#39;C6&#39;, &#39;CP3&#39;, &#39;CP1&#39;, &#39;CPz&#39;, &#39;CP2&#39;, &#39;CP4&#39;, &#39;P1&#39;, &#39;Pz&#39;, &#39;P2&#39;, &#39;POz&#39;] . # which channel to plot? channel = &#39;C4&#39; chIndex = [i for i, j in enumerate(ch_names) if j == channel] . plt.plot(x[chIndex[0], :]) plt.title(channel) plt.ylabel(&#39;Amplitude&#39;) plt.xlabel(&#39;Time samples&#39;) . Text(0.5, 0, &#39;Time samples&#39;) .",
            "url": "https://berdakh.github.io/blog/eeg/jupyter/2020/09/01/EEG-Visualization.html",
            "relUrl": "/eeg/jupyter/2020/09/01/EEG-Visualization.html",
            "date": " • Sep 1, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://berdakh.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About me",
          "content": "Berdakh Abibullaev, Ph.D. . . Robotics and Mechatronics Department, School of Engineering and Digital Sciences, Nazarbayev University Address: 53 Kabanbay Batyr Avenue, Nur-Sultan, Kazakhstan, Block 7. Email : berdakh.abibullaev at nu.edu.kz  . Short Biography: . . Dr. Berdakh Abibullaev received his M.Sc. and Ph.D. degrees in electronic engineering from Yeungnam University, South Korea in 2006 and 2010 under the Korean Government Scholarship program. He held research scientist positions at Daegu-Gyeongbuk Institute of Science and Technology (2010-2013) and Samsung Medical Center, South Korea (2013-2014). He was also appointed as a research professor at Sungkyunkwan University, Seoul. In 2014, he received NIH (National Institute of Health, USA), a postdoctoral research fellowship to join a research project between the University of Houston Brain-Machine Interface Systems Team and a Texas Medical Center in developing neural interfaces for rehabilitation in post-stroke patients. Currently, he is an Assistant Professor in the Department of Robotics and Mechatronics, Nazarbayev University, Kazakhstan. . Dr. Abibullaev has considerable research and clinical experience working with patient populations and physicians in applying scientific and technical skills to advance the development of treatments for neurological disorders. His current research focuses on designing robust neural-interfaces to control a robotic device for human augmentation, and advancing machine learning algorithms to develop new and alternative solutions to inference problems of Brain-Computer/Machine Interfaces. . Research Interests . . Neural Engineering: Brain-Computer/Machine Interfaces; Biomedical data analysis; Epilepsy Research; Stroke Rehabilitation, EEG/ECoG/fNIRS Signal Processing. . Machine Learning: Deep Learning and its applications; Kernel based learning; Feature Representation Learning; Pattern analysis and recognition. . Education . . PhD, Department of Electronic Engineering: {2006-2010}, Yeungnam University, South Korea . MSc, Department of Electronic Engineering: {2004-2006}, Yeungnam University, South Korea . BSc, Information and Communication Engineering: {2000-2004}, Tashkent University of Information Technologies, Uzbekistan . Academic and Research Experience . . Assistant Professor {09/2015-present}, Robotics &amp; Mechatronics Department, School of Engineering and Digital Sciences, Nazarbayev University, Nur-Sultan, Kazakhstan . Visiting Professor: {5/2018 - 7/2018}, Department of Electrical Engineering &amp; Computer Science, University of Houston, Houston, Texas, U.S.A. . NIH Postdoctoral Research Fellow II: {5/2014 - 9/2015}, Department of Electrical Engineering &amp; Computer Science, University of Houston, Houston, Texas, U.S.A. . Research Professor: {1/2014 - 9/2015}, Department of Neurology, Samsung Medical Center, Sungkyunkwan University, Seoul, South Korea . Senior Research Scientist: {05/2011 - 12/2013}, Robotics Research Division, Daegu Gyeongbuk Institute of Science and Technology, South Korea . Postdoctoral Research Fellow: {02/2010 - 05/2011}, Robotics Research Division, Daegu Gyeongbuk Institute of Science and Technology, South Korea . Selected Publications . . Check out his:: Google scholar :: for recent publications. . B. Abibullaev, I. and A. Zollanvari. A Brute-force CNN Model Selection for Accurate Classification of Sensorimotor Rhythms in BCIs IEEE Access, 2020, in press, (Impact Factor: 4; Quartile rank: Q1). . A. Zollanvari, M. Abdirash, A. Dadlani and B. Abibullaev. Asymptotically Bias-Corrected Regularized Linear Discriminant Analysis for Cost-Sensitive Binary Classification IEEE Signal Processing Letters, 2019, (Impact Factor: 2.8; Quartile rank: Q1). . B. Abibullaev and A. Zollanvari. Learning Discriminative Spatiospectral Features of ERPs for Accurate Brain-Computer Interfaces IEEE Journal of Biomedical and Health Informatics, vol. 98, pp. 1-12, 2019; (Impact Factor: 5; Quartile rank: Q1). . B. Abibullaev, A. Zollanvari, B. Saduanov, and T. Alizadeh. Design and Optimization of a BCI-Driven Telepresence Robot Through Programming by Demonstration. IEEE Access, 2019, vol. 7, (Impact Factor: 4; Quartile rank: Q1). . N.A. Bhagat, A. Venkatakrishnan, B. Abibullaev, E.J. Artz, N. Yozbatiran, A. Blank, J. French, C. Karmonik, R.G.Grossman, M.K O’Malley, G. Francisco, J.L. Contreras-Vidal. Design and optimization of an EEG-based brain machine interface (BMI) to an upper-limb exoskeleton for stroke survivors. , vol. 10, March, 2016 (Impact Factor: 3.566; Quartile rank: Q1). . J.G. Cruz-Garza, Z.R. Hernandez, T. Tse, E. Caducoy, B. Abibullaev, J.L. Contreras-Vidal. A novel experimental and analytical approach to the multimodal neural decoding of intent during social interaction in freely-behaving human infants. , doi: 10.3791/53406, October, 2015 (Impact Factor : 1.232; Quartile rank: Q2). . C.H. Park, J.H Seo, D. Kim, B. Abibullaev, H. Kwon, Y.H. Lee, M.Y. Kim, K. Kim, J.S. Kim, E.Y. Joo, S.B. Hong, (2015, Feb). Source Imaging in Partial Epilepsy in Comparison with Presurgical Evaluation and Magnetoencephalography. Journal of Clinical Neurology, 2015 Feb 17, 11:e12 (Impact Factor : 2.596; Quartile rank: Q2). . Patents . J. An, S.H. Jin, S.H. Lee, J.I. Moon B. Abibullaev, J.H. Ahn and G.H. Jang. REHABILITATION TRAINING SYSTEM AND METHOD. : 9,081,890,Washington, DC: United States. Patent and Trademark Office, 2015 (https://www.google.com/patents/US9081890). . J. An, S.H. Jin, S.H. Lee, J.I. Moon B. Abibullaev, J.H. Ahn and G.H. Jang. Self-directed rehabilitation training method combining brain signals and functional electro-stimulation. : 17077057, Application number: 14049302, 09-OCT-2013, United States, (http://www.google.com/patents/US20140200632). .",
          "url": "https://berdakh.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://berdakh.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}